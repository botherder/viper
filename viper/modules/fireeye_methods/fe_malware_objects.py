import json
import traceback
import xml

import requests
import urllib3
from viper.core.config import __config__
import xmltodict
from viper.core.session import __sessions__

cfg = __config__

fe_user = cfg.fireeye.username
fe_passwd = cfg.fireeye.password


def handle_http_errors(self, current_method: str, current_appliance: str, r):
    if r.status_code == 400:
        self.log('error', current_method + "Invalid filter error" + current_appliance)
        self.log('error', r.content.decode())
    elif r.status_code == 401:
        self.log('error', current_method + "Invalid session token" + current_appliance)
        self.log('error', r.content.decode())
    elif r.status_code == 404:
        self.log('error', current_method + "Resource not found" + current_appliance)
    elif r.status_code == 405:
        self.log('error', current_method + "Method not allowed" + current_appliance)
    else:
        self.log('error', current_method + "Something unforeseen has happened: " + str(r.status_code) + "\n" +
                 str(r.text) + current_appliance)


def generate_parameter_object(appliance: str, api_tokens, endpoint: str, **kwargs):
    return {"appliance_and_endpoint": appliance + endpoint,
            "appliance_api_token": api_tokens.get(appliance),
            "content-type": kwargs.get("content_type") or "application/json",
            "json": kwargs.get("json") or None
            }


def get_standard_json():
    return {'application': "-1",
            'timeout': "60",
            'priority': "0",
            'profiles': ['win7-sp1m'],
            'analysistype': "0",
            'force': "true",
            'prefetch': '1',
            'properties': {
                'application_context': {
                    'file_name': str(__sessions__.current.file.name)
                }
            }
            }


def do_fe_malware_objects_request(obj: dict):
    return requests.post(obj.get("appliance_and_endpoint"),
                         headers={"X-FeApi-Token": obj.get("appliance_api_token")},
                         files={
                             'file': open(str(__sessions__.current.file.path), "rb")
                         },
                         data={'filename': str(__sessions__.current.file.name), 'options': json.dumps(obj.get("json"))},
                         proxies=cfg.fireeye.proxies,
                         verify=cfg.fireeye.verify,
                         cert=cfg.fireeye.cert)


def do_fe_url_request(obj: dict):
    return requests.post(obj.get("appliance_and_endpoint"),
                         headers={"X-FeApi-Token": obj.get("appliance_api_token"),
                                  "Content-Type": "application/json"},
                         json=obj.get("json"),
                         proxies=cfg.fireeye.proxies,
                         verify=cfg.fireeye.verify,
                         cert=cfg.fireeye.cert)


def do_fe_retrieve_result_request(obj: dict):
    return requests.get(obj.get("appliance_and_endpoint"),
                        headers={"X-FeApi-Token": obj.get("appliance_api_token")},
                        proxies=cfg.fireeye.proxies,
                        verify=cfg.fireeye.verify,
                        cert=cfg.fireeye.cert)


def fe_submit_single_file_malware_objects_request(self, **kwargs):
    current_method = "[MalwareObjects|SubmitMalwareObjectsRequest] "
    for index, appliance in enumerate(self.active_appliances, start=1):
        current_appliance = " | [" + str(index) + "/" + str(len(self.active_appliances)) + "]"
        try:
            self.log('debug', current_method + "Current API Token: " + self.api_tokens.get(str(appliance)) +
                     current_appliance)
            stdjson = get_standard_json()
            obj = generate_parameter_object(appliance, self.api_tokens, "/submissions",
                                            content_type="multipart/form-data",
                                            json=stdjson)
            if len(kwargs) > 0:
                for k, v in kwargs:
                    obj["json"][str(k)] = str(v)
            r = do_fe_malware_objects_request(obj)
            if r.status_code == 200:
                self.log('success', current_method + "Submitting malware object successful" + current_appliance)
                json_response = json.loads(r.text)
                header = ["ID", "VNC Port", "UUID"]
                rows = []
                for submission in json_response:
                    details = submission["submission_details"]
                    details_json = json.loads(details)[0]
                    rows.append([
                        str(submission["ID"]),
                        str(details_json["vnc_port"][0]),
                        str(details_json["uuid"])
                    ])
                self.log('table', dict(header=header, rows=rows))
                return json_response
            else:
                handle_http_errors(self, current_method, current_appliance, r)
        except urllib3.exceptions.MaxRetryError:
            self.log('error', "Maximum amount of retries has been used. Connection abort...")
            traceback.print_exc()
            return
        except requests.exceptions.ProxyError:
            self.log('error', "Issues with Proxy. Connection abort...")
            traceback.print_exc()
            return
        except FileNotFoundError:
            self.log('error', "The file does not exist at the given path.")
            return
        except Exception:
            self.log('error', "Unexpected error")
            traceback.print_exc()
            return


def convert_xml_to_json_or_retry(self, submissions_responses, r, obj):
    try:
        xmldict = xmltodict.parse(r.text)
        submissions_responses.append([
            json.dumps(xmldict)
        ])
    except xml.parsers.expat.ExpatError:
        self.log('warning', "No valid XML returned by the API. Retrieving simplified XML")
        obj["appliance_and_endpoint"] = obj["appliance_and_endpoint"].split("?")[0]
        r = do_fe_retrieve_result_request(obj)
        if r.status_code == 200:
            try:
                xmldict = xmltodict.parse(r.text)
                submissions_responses.append([
                    json.dumps(xmldict)
                ])
            except xml.parsers.expat.ExpatError:
                self.log('error', "No valid XML returned by the API")
        else:
            self.log('error', "Error while retrieving simplfied JSON")
    return submissions_responses


def fe_submission_results_request(self):
    current_method = "[MalwareObjects|SubmissionResultsRequest] "
    for index, appliance in enumerate(self.active_appliances, start=1):
        current_appliance = " | [" + str(index) + "/" + str(len(self.active_appliances)) + "]"
        try:
            self.log('debug', current_method + "Current API Token: " + self.api_tokens.get(str(appliance)) +
                     current_appliance)
            submissions_responses = []
            for submission_key in self.id_list:
                obj = generate_parameter_object(appliance, self.api_tokens, "/submissions/results/" +
                                                str(submission_key) + "?info_level=extended")
                r = do_fe_retrieve_result_request(obj)
                if r.status_code == 200:
                    self.log('success', current_method + "Requested ID #" + str(submission_key) + " successfully" +
                             current_appliance)
                    with open('out.xml', 'w') as out:
                        out.write(r.text)
                        out.close()
                    submissions_responses = convert_xml_to_json_or_retry(self, submissions_responses, r, obj)
                elif r.status_code == 404:
                    self.log('error',
                             current_method + "Invalid submission key" + str(submission_key) + current_appliance)
                else:
                    handle_http_errors(self, current_method, current_appliance, r)
            header = ["Appliance ID", "ID", "Name", "Severity", "Product", "VLAN", "Malicious", "Malware Name",
                      "Malware MD5", "Malware SHA256", "Alert URL", "Action", "Occurred"]
            rows = []
            with open('out.json', 'w') as out:
                json.dump(submissions_responses, out)
                out.close()
            for res in submissions_responses:
                res_json = json.loads(res[0])["alerts"]["ns2:alert"]
                rows.append([
                    res_json["@appliance-id"],
                    res_json["@id"],
                    res_json["@name"],
                    res_json["@severity"],
                    res_json["@product"],
                    res_json["@vlan"],
                    res_json["@malicious"],
                    res_json["ns2:explanation"]["ns2:malware-detected"]["ns2:malware"]["@name"],
                    res_json["ns2:explanation"]["ns2:malware-detected"]["ns2:malware"]["ns2:md5sum"],
                    res_json["ns2:explanation"]["ns2:malware-detected"]["ns2:malware"]["ns2:sha256"],
                    res_json["ns2:alert-url"],
                    res_json["ns2:action"],
                    res_json["ns2:occurred"]
                ])
            self.log('table', dict(header=header, rows=rows))
            return submissions_responses
        except urllib3.exceptions.MaxRetryError:
            self.log('error', "Maximum amount of retries has been used. Connection abort...")
            traceback.print_exc()
            return
        except requests.exceptions.ProxyError:
            self.log('error', "Issues with Proxy. Connection abort...")
            traceback.print_exc()
            return
        except FileNotFoundError:
            self.log('error', "The file does not exist at the given path.")
            return
        except Exception:
            self.log('error', "Unexpected error")
            traceback.print_exc()
            return


def fe_submission_queue_size_request(self):
    current_method = "[MalwareObjects|SubmissionQueueSizeRequest] "
    for index, appliance in enumerate(self.active_appliances, start=1):
        current_appliance = " | [" + str(index) + "/" + str(len(self.active_appliances)) + "]"
        try:
            self.log('debug', current_method + "Current API Token: " + self.api_tokens.get(str(appliance)) +
                     current_appliance)
            obj = generate_parameter_object(appliance, self.api_tokens, "/submissions/queueSize")
            r = do_fe_retrieve_result_request(obj)
            if r.status_code == 200:
                self.log('info', current_method + "Current Queue Size: " + str(json.loads(r.text)["queueSize"]) +
                         current_appliance)
            else:
                handle_http_errors(self, current_method, current_appliance, r)
            return int(json.loads(r.text)["queueSize"])
        except urllib3.exceptions.MaxRetryError:
            self.log('error', "Maximum amount of retries has been used. Connection abort...")
            traceback.print_exc()
            return
        except requests.exceptions.ProxyError:
            self.log('error', "Issues with Proxy. Connection abort...")
            traceback.print_exc()
            return
        except FileNotFoundError:
            self.log('error', "The file does not exist at the given path.")
            return
        except Exception:
            self.log('error', "Unexpected error")
            traceback.print_exc()
            return


def fe_submission_status_request(self):
    current_method = "[MalwareObjects|SubmissionStatusRequest] "
    for index, appliance in enumerate(self.active_appliances, start=1):
        current_appliance = " | [" + str(index) + "/" + str(len(self.active_appliances)) + "]"
        try:
            self.log('debug', current_method + "Current API Token: " + self.api_tokens.get(str(appliance)) +
                     current_appliance)
            submissions_responses = []
            for submission_key in self.id_list:
                obj = generate_parameter_object(appliance, self.api_tokens, "/submissions/status/" +
                                                str(submission_key))
                r = do_fe_retrieve_result_request(obj)
                if r.status_code == 200:
                    submissions_responses.append(str(json.loads(r.text)["submissionStatus"]))
                elif r.status_code == 404:
                    self.log('error',
                             current_method + "Invalid submission key " + str(submission_key) + current_appliance)
                else:
                    handle_http_errors(self, current_method, current_appliance, r)
            if len(set(submissions_responses)) == 1 and 'Done' in set(submissions_responses):
                self.log('success', current_method + "All Submissions are done" + current_appliance)
                return True
            elif 'Submission not found' in set(submissions_responses):
                for key in self.id_list:
                    self.log("error", current_method + "One of the Submission IDs " + str(key) +
                             " could not be found" + current_appliance)
                return False
            elif 'In Progress' in set(submissions_responses):
                for key in self.id_list:
                    self.log("warning", current_method + "One of the Submission IDs " + str(key) +
                             " is still in progress" + current_appliance)
                return False
        except urllib3.exceptions.MaxRetryError:
            self.log('error', "Maximum amount of retries has been used. Connection abort...")
            traceback.print_exc()
            return False
        except requests.exceptions.ProxyError:
            self.log('error', "Issues with Proxy. Connection abort...")
            traceback.print_exc()
            return False
        except FileNotFoundError:
            self.log('error', "The file does not exist at the given path.")
            return False
        except Exception:
            self.log('error', "Unexpected error")
            traceback.print_exc()
            return False


def fe_submit_file_request(self, **kwargs):
    current_method = "[MalwareObjects|SubmitFileRequest] "
    for index, appliance in enumerate(self.active_appliances, start=1):
        current_appliance = " | [" + str(index) + "/" + str(len(self.active_appliances)) + "]"
        try:
            self.log('debug', current_method + "Current API Token: " + self.api_tokens.get(str(appliance)) +
                     current_appliance)
            stdjson = get_standard_json()
            obj = generate_parameter_object(appliance, self.api_tokens, "/submissions/file",
                                            content_type="multipart/form-data",
                                            json=stdjson)
            if len(kwargs) > 0:
                for k, v in kwargs:
                    obj["json"][str(k)] = str(v)
            r = do_fe_malware_objects_request(obj)
            if r.status_code == 200:
                self.log('success', current_method + "Submitted file successful" + current_appliance)
                json_response = json.loads(r.text)
                header = ["Submission Keys"]
                rows = []
                for submission in json_response:
                    rows.append([
                        str(submission["ID"])
                    ])
                self.log('table', dict(header=header, rows=rows))
            elif r.status_code == 404:
                self.log('error', current_method + "Resource not found" + current_appliance)
            else:
                handle_http_errors(self, current_method, current_appliance, r)
        except urllib3.exceptions.MaxRetryError:
            self.log('error', "Maximum amount of retries has been used. Connection abort...")
            traceback.print_exc()
            return
        except requests.exceptions.ProxyError:
            self.log('error', "Issues with Proxy. Connection abort...")
            traceback.print_exc()
            return
        except FileNotFoundError:
            self.log('error', "The file does not exist at the given path.")
            return
        except Exception:
            self.log('error', "Unexpected error")
            traceback.print_exc()
            return


def fe_submit_url_request(self, url: [str], **kwargs):
    current_method = "[MalwareObjects|SubmitUrlRequest] "
    for index, appliance in enumerate(self.active_appliances, start=1):
        current_appliance = " | [" + str(index) + "/" + str(len(self.active_appliances)) + "]"
        try:
            self.log('debug', current_method + "Current API Token: " + self.api_tokens.get(str(appliance)) +
                     current_appliance)
            stdjson = {'application': "-1",
                       'timeout': "60",
                       'priority': "0",
                       'profiles': ['win7-sp1m'],
                       'analysistype': "2",
                       'force': "true",
                       'prefetch': '1',
                       'urls': url
                       }
            obj = generate_parameter_object(appliance, self.api_tokens, "/submissions/url",
                                            content_type="multipart/form-data",
                                            json=stdjson)
            if len(kwargs) > 0:
                for k, v in kwargs:
                    obj["json"][str(k)] = str(v)
            r = do_fe_malware_objects_request(obj)
            if r.status_code == 200:
                self.log('success', current_method + "Submitted URL successful" + current_appliance)
                json_response = json.loads(r.text)
                header = ["ID", "Link", "VNC Port", "Job IDs", "ID", "UUID"]
                rows = []
                for submission in json_response["response"]:
                    details = json.loads(submission["submission_details"])[0]
                    rows.append([
                        str(submission["id"]),
                        str(appliance) + str(submission["link"]["href"]),
                        str(details["vnc_port"]),
                        str(details["job_ids"]),
                        str(details["id"]),
                        str(details["uuid"])
                    ])
                self.log('table', dict(header=header, rows=rows))
            else:
                handle_http_errors(self, current_method, current_appliance, r)
        except urllib3.exceptions.MaxRetryError:
            self.log('error', "Maximum amount of retries has been used. Connection abort...")
            traceback.print_exc()
            return
        except requests.exceptions.ProxyError:
            self.log('error', "Issues with Proxy. Connection abort...")
            traceback.print_exc()
            return
        except FileNotFoundError:
            self.log('error', "The file does not exist at the given path.")
            return
        except Exception:
            self.log('error', "Unexpected error")
            traceback.print_exc()
            return
